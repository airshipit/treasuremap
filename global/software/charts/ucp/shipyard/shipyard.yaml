---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: ucp-shipyard
  labels:
    name: ucp-shipyard-global
  layeringDefinition:
    abstract: false
    layer: global
  storagePolicy: cleartext
  substitutions:
    # Chart source
    - src:
        schema: pegleg/SoftwareVersions/v1
        name: software-versions
        path: .charts.ucp.shipyard
      dest:
        path: .source

    # Images
    - src:
        schema: pegleg/SoftwareVersions/v1
        name: software-versions
        path: .images.ucp.shipyard
      dest:
        path: .values.images.tags

    # Shipyard log level
    - src:
        schema: nc/CorridorConfig/v1
        name: corridor-config
        path: .airship.log_level_numeric
      dest:
        path: .values.conf.shipyard.logging.log_level
    - src:
        schema: nc/CorridorConfig/v1
        name: corridor-config
        path: .airship.log_level
      dest:
        path: .values.conf.airflow.core.logging_level

    # Endpoints
    - src:
        schema: pegleg/EndpointCatalogue/v1
        name: ucp_endpoints
        path: .ucp.identity
      dest:
        path: .values.endpoints.identity
    - src:
        schema: pegleg/EndpointCatalogue/v1
        name: ucp_endpoints
        path: .ucp.postgresql
      dest:
        path: .values.endpoints.postgresql_shipyard_db
    - src:
        schema: pegleg/EndpointCatalogue/v1
        name: ucp_endpoints
        path: .ucp.postgresql
      dest:
        path: .values.endpoints.postgresql_airflow_db
    - src:
        schema: pegleg/EndpointCatalogue/v1
        name: ucp_endpoints
        path: .ucp.postgresql_airflow_celery
      dest:
        path: .values.endpoints.postgresql_airflow_celery_db
    - src:
        schema: pegleg/EndpointCatalogue/v1
        name: ucp_endpoints
        path: .ucp.shipyard
      dest:
        path: .values.endpoints.shipyard
    - src:
        schema: pegleg/EndpointCatalogue/v1
        name: ucp_endpoints
        path: .ucp.airflow_oslo_messaging
      dest:
        path: .values.endpoints.oslo_messaging
    - src:
        schema: pegleg/EndpointCatalogue/v1
        name: ucp_endpoints
        path: .ucp.oslo_cache
      dest:
        path: .values.endpoints.oslo_cache
    # Database path
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.shipyard.postgres.database
      dest:
        path: .values.endpoints.postgresql_shipyard_db.path
        pattern: 'DB_NAME'
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.airflow.postgres.database
      dest:
        path: .values.endpoints.postgresql_airflow_db.path
        pattern: 'DB_NAME'
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.airflow.postgres.database
      dest:
        path: .values.endpoints.postgresql_airflow_celery_db.path
        pattern: 'DB_NAME'
    # Credentials
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.postgres.admin
      dest:
        path: .values.endpoints.postgresql_shipyard_db.auth.admin
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.postgres.admin
      dest:
        path: .values.endpoints.postgresql_airflow_db.auth.admin
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.postgres.admin
      dest:
        path: .values.endpoints.postgresql_airflow_celery_db.auth.admin
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.keystone.admin
      dest:
        path: .values.endpoints.identity.auth.admin
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.shipyard.postgres
      dest:
        path: .values.endpoints.postgresql_shipyard_db.auth.user
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.airflow.postgres
      dest:
        path: .values.endpoints.postgresql_airflow_db.auth.user
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.airflow.postgres
      dest:
        path: .values.endpoints.postgresql_airflow_celery_db.auth.user
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.airflow.oslo_messaging.user
      dest:
        path: .values.endpoints.oslo_messaging.auth.user
    - src:
        schema: pegleg/AccountCatalogue/v1
        name: ucp_service_accounts
        path: .ucp.airflow.oslo_messaging.admin
      dest:
        path: .values.endpoints.oslo_messaging.auth.admin

    # Secrets
    - dest:
        path: .values.endpoints.identity.auth.admin.password
      src:
        schema: deckhand/Passphrase/v1
        name: ucp_keystone_admin_password
        path: .
    - dest:
        path: .values.endpoints.postgresql_shipyard_db.auth.admin.password
      src:
        schema: deckhand/Passphrase/v1
        name: ucp_postgres_admin_password
        path: .
    - dest:
        path: .values.endpoints.postgresql_airflow_db.auth.admin.password
      src:
        schema: deckhand/Passphrase/v1
        name: ucp_postgres_admin_password
        path: .
    - dest:
        path: .values.endpoints.postgresql_airflow_celery_db.auth.admin.password
      src:
        schema: deckhand/Passphrase/v1
        name: ucp_postgres_admin_password
        path: .
    - dest:
        path: .values.endpoints.identity.auth.shipyard.password
      src:
        schema: deckhand/Passphrase/v1
        name: ucp_shipyard_keystone_password
        path: .
    - dest:
        path: .values.endpoints.postgresql_shipyard_db.auth.user.password
      src:
        schema: deckhand/Passphrase/v1
        name: ucp_shipyard_postgres_password
        path: .
    - dest:
        path: .values.endpoints.postgresql_airflow_db.auth.user.password
      src:
        schema: deckhand/Passphrase/v1
        name: ucp_airflow_postgres_password
        path: .
    - dest:
        path: .values.endpoints.postgresql_airflow_celery_db.auth.user.password
      src:
        schema: deckhand/Passphrase/v1
        name: ucp_airflow_postgres_password
        path: .
    - src:
        schema: deckhand/Passphrase/v1
        name: ucp_airflow_oslo_messaging_password
        path: .
      dest:
        path: .values.endpoints.oslo_messaging.auth.user.password
    - src:
        schema: deckhand/Passphrase/v1
        name: ucp_oslo_messaging_password
        path: .
      dest:
        path: .values.endpoints.oslo_messaging.auth.admin.password

data:
  chart_name: shipyard
  release: ucp-shipyard
  namespace: ucp
  protected:
    continue_processing: false
  wait:
    timeout: 1800
    labels:
      release_group: clcp-ucp-shipyard
  test:
    enabled: true
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    options:
      force: true
    pre:
      delete:
        - type: job
          labels:
            release_group: clcp-ucp-shipyard
  values:
    endpoints:
      postgresql_airflow_db:
        name: postgresql
        hosts:
          default: postgresql
        path: /DB_NAME
        scheme: postgresql+psycopg2
        port:
          postgresql:
            default: 5432
        host_fqdn_override:
          default: null
      postgresql_shipyard_db:
        name: postgresql
        hosts:
          default: postgresql
        path: /DB_NAME
        scheme: postgresql+psycopg2
        port:
          postgresql:
            default: 5432
        host_fqdn_override:
          default: null
    prod_environment: true
    pod:
      affinity:
        anti:
          type:
            default: requiredDuringSchedulingIgnoredDuringExecution
      mandatory_access_control:
        type: apparmor
        shipyard-api:
          init: runtime/default
          shipyard-api: runtime/default
          airflow-web: runtime/default
        airflow-worker:
          init: runtime/default
          worker-perms: runtime/default
          airflow-worker: runtime/default
          airflow-scheduler: runtime/default
          airflow-logrotate: runtime/default
        airflow-scheduler:
          init: runtime/default
          airflow-scheduler: runtime/default
        shipyard-db-auxiliary:
          init: runtime/default
          shipyard-db-auxiliary: runtime/default
        shipyard-db-init:
          init: runtime/default
          shipyard-db-init: runtime/default
        shipyard-db-sync:
          init: runtime/default
          shipyard-db-sync: runtime/default
        airflow-db-init:
          init: runtime/default
          airflow-db-init: runtime/default
        airflow-db-sync:
          init: runtime/default
          airflow-db-sync: runtime/default
        shipyard-api-test:
          shipyard-api-test: runtime/default
      replicas:
        shipyard:
          api: 1
        airflow:
          worker: 1
          # Set replicas to 0 to disable the standalone scheduler
          scheduler: 0
    labels:
      job:
        node_selector_key: ucp-control-plane
        node_selector_value: enabled
    network:
      shipyard:
        enable_node_port: false
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/proxy-body-size: "10m"
            nginx.ingress.kubernetes.io/configuration-snippet: |
              more_set_headers "X-XSS-Protection: 1; mode=block";
              more_set_headers "X-Frame-Options: deny";
      airflow:
        web:
          enable_node_port: false
    conf:
      shipyard:
        keystone_authtoken:
          memcache_security_strategy: None
        requests_config:
          deckhand_client_read_timeout: 300
      rabbitmq:
      # adding rmq policy to mirror messages from celery queues
      # TODO: the vhost should be sourced from the same place as the config of the queue (endpoints)
      #       and must align with endpoints.yaml airflow_oslo_messaging.path, but without the leading slash.
        policies:
        - vhost: "airflow"
          name: "ha_celery"
          definition:
            ha-mode: "all"
            ha-sync-mode: "automatic"
          priority: 0
          apply-to: all
          pattern: 'celery|default'
      policy:
        admin_create: role:admin or role:admin_ucp
        admin_read_access: rule:admin_create or role:admin_ucp_viewer or role:cicd_viewer
        workflow_orchestrator:list_actions: rule:admin_read_access
        workflow_orchestrator:create_action: rule:admin_create or role:cicd_viewer
        workflow_orchestrator:get_action: rule:admin_read_access
        workflow_orchestrator:get_action_step: rule:admin_read_access
        workflow_orchestrator:get_action_step_logs: rule:admin_read_access
        workflow_orchestrator:get_action_validation: rule:admin_read_access
        workflow_orchestrator:invoke_action_control: rule:admin_create
        workflow_orchestrator:get_configdocs_status: rule:admin_read_access
        workflow_orchestrator:create_configdocs: rule:admin_create
        workflow_orchestrator:get_configdocs: rule:admin_read_access
        workflow_orchestrator:get_configdocs_cleartext: rule:admin_create
        workflow_orchestrator:commit_configdocs: rule:admin_create
        workflow_orchestrator:get_renderedconfigdocs: rule:admin_read_access
        workflow_orchestrator:get_renderedconfigdocs_cleartext: rule:admin_create or role:cicd_viewer
        workflow_orchestrator:list_workflows: rule:admin_read_access
        workflow_orchestrator:get_workflow: rule:admin_read_access
        workflow_orchestrator:get_notedetails: rule:admin_read_access
        workflow_orchestrator:get_site_statuses: rule:admin_read_access
        workflow_orchestrator:action_deploy_site: rule:admin_create
        workflow_orchestrator:action_update_site: rule:admin_create
        workflow_orchestrator:action_update_software: rule:admin_create
        workflow_orchestrator:action_redeploy_server: rule:admin_create
        workflow_orchestrator:action_relabel_nodes: rule:admin_create
        workflow_orchestrator:action_test_site: rule:admin_create or role:cicd_viewer
  dependencies:
    - shipyard-htk
...
